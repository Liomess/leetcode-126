class Solution {
    unordered_map<string, int> mp;
    vector<vector<string>> ans;
    string b;
private:
void dfs(string word ,vector<string>& seq){
    if (word==b){
        reverse(seq.begin(),seq.end());
        ans.push_back(seq);
        reverse(seq.begin(),seq.end());
        return;
    }
    int steps=mp[word];
    int sz=b.size();
    for(int i=0;i<sz;i++){
        char org=word[i];
        for(char ch='a';ch<='z';ch++){
             word[i]=ch;
             if(mp.find(word) != mp.end()  &&  mp[word]+1 == steps){
                 seq.push_back(word);
                 dfs(word,seq);
                 seq.pop_back();
             }
             
        }
        word[i]=org;
    }
}
public:
    vector<vector<string>> findLadders(string begin, string end, vector<string>& word) {
        // code here
        unordered_set<string> st(word.begin(),word.end());
        queue<string> q;
        b=begin;
        q.push(begin);
        mp[begin]=1;
        int sz=begin.size();
        st.erase(begin);
        while(!q.empty()) {
            string word=q.front();
            int steps=mp[word];
            q.pop();
            if(word == end) break;
            for(int i=0;i<sz;i++){
                char org=word[i];
                for(char ch='a';ch<='z';ch++){
                    word[i]=ch;
                    if(st.count(word)){
                        q.push(word);
                        st.erase(word);
                        mp[word]=steps+1;
                        
                    }
                }
                word[i]=org;
            } 
        }
        if(mp.find(end)!= mp.end()){
            vector<string> seq;
            seq.push_back(end);
            dfs(end,seq);
        }
        return ans;
    }
};
